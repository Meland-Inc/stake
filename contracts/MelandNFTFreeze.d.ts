/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {TypedEventFilter, TypedEvent, TypedListener} from "./common";

interface MelandNFTFreezeInterface extends ethers.utils.Interface {
  functions: {
    "ereezeExpiredAtMapById(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ereezeExpiredAtMapById",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ereezeExpiredAtMapById",
    data: BytesLike
  ): Result;

  events: {
    "FreezeEnabledUpdate(bool)": EventFragment;
    "FreezeWhiteListUpdate(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FreezeEnabledUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreezeWhiteListUpdate"): EventFragment;
}

export type FreezeEnabledUpdateEvent = TypedEvent<
  [boolean] & {_freezeEnabled: boolean}
>;

export type FreezeWhiteListUpdateEvent = TypedEvent<
  [string, boolean] & {_address: string; _bool: boolean}
>;

export class MelandNFTFreeze extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MelandNFTFreezeInterface;

  functions: {
    ereezeExpiredAtMapById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  ereezeExpiredAtMapById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ereezeExpiredAtMapById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FreezeEnabledUpdate(bool)"(
      _freezeEnabled?: null
    ): TypedEventFilter<[boolean], {_freezeEnabled: boolean}>;

    FreezeEnabledUpdate(
      _freezeEnabled?: null
    ): TypedEventFilter<[boolean], {_freezeEnabled: boolean}>;

    "FreezeWhiteListUpdate(address,bool)"(
      _address?: string | null,
      _bool?: null
    ): TypedEventFilter<[string, boolean], {_address: string; _bool: boolean}>;

    FreezeWhiteListUpdate(
      _address?: string | null,
      _bool?: null
    ): TypedEventFilter<[string, boolean], {_address: string; _bool: boolean}>;
  };

  estimateGas: {
    ereezeExpiredAtMapById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ereezeExpiredAtMapById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
