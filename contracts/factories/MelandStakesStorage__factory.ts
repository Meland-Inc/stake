/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {
  MelandStakesStorage,
  MelandStakesStorageInterface,
} from "../MelandStakesStorage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "stakePoolId",
        type: "uint256",
      },
    ],
    name: "CreateStakePool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "stakePoolId",
        type: "uint256",
      },
    ],
    name: "DefaultStakeUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "stakeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "eran",
        type: "uint256",
      },
    ],
    name: "Harvest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "stakeId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "NewStake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "stakeId",
        type: "bytes32",
      },
    ],
    name: "StakeClaim",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptedToken",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "stakeById",
    outputs: [
      {
        internalType: "uint256",
        name: "stakePoolId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "lastRecivedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiredAt",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakePoolById",
    outputs: [
      {
        internalType: "uint256",
        name: "ditaminLD",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ditaminC",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfMELD",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "landC",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "vipname",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "stakeApyPercent",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "gameApyPercent",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "freezeTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalVolume",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakePoolIdsByStaker",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakePoolSaleCountByStakePoolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633032ac0c1461005c578063451c3d801461008d578063beadd5f9146100b8578063feb95e671461013f578063fee496f21461016d575b600080fd5b61006f61006a366004610290565b610180565b604051610084999897969594939291906102a9565b60405180910390f35b6001546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6101086100c6366004610290565b600560208190526000918252604090912080546001820154600283015460038401546004850154949095015492946001600160a01b0390921693909260ff1686565b604080519687526001600160a01b0390951660208701529385019290925260608401526080830152151560a082015260c001610084565b61015f61014d366004610290565b60046020526000908152604090205481565b604051908152602001610084565b61015f61017b36600461034d565b61025f565b60036020819052600091825260409091208054600182015460028301549383015460048401805493959294929360ff90921692916101bd90610385565b80601f01602080910402602001604051908101604052809291908181526020018280546101e990610385565b80156102365780601f1061020b57610100808354040283529160200191610236565b820191906000526020600020905b81548152906001019060200180831161021957829003601f168201915b50505060058401546006850154600790950154939460ff80831695610100909304169350915089565b6006602052816000526040600020818154811061027b57600080fd5b90600052602060002001600091509150505481565b6000602082840312156102a257600080fd5b5035919050565b60006101208b835260208b818501528a604085015260ff8a16606085015281608085015288518083860152600092505b808310156102f8578983018201518584016101400152918101916102d9565b8083111561030b57600061014082870101525b601f01601f1916840161014001925061032c91505060a083018760ff169052565b60ff851660c083015260e08201939093526101000152979650505050505050565b6000806040838503121561036057600080fd5b82356001600160a01b038116811461037757600080fd5b946020939093013593505050565b600181811c9082168061039957607f821691505b602082108114156103ba57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205e826250c1c62f780fb2e7156b1f1d5312c9448f49ec3791e78539dca859d5ed64736f6c63430008090033";

export class MelandStakesStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<MelandStakesStorage> {
    return super.deploy(overrides || {}) as Promise<MelandStakesStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MelandStakesStorage {
    return super.attach(address) as MelandStakesStorage;
  }
  connect(signer: Signer): MelandStakesStorage__factory {
    return super.connect(signer) as MelandStakesStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MelandStakesStorageInterface {
    return new utils.Interface(_abi) as MelandStakesStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MelandStakesStorage {
    return new Contract(address, _abi, signerOrProvider) as MelandStakesStorage;
  }
}
