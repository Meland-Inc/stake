/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {Signer, utils, Contract, ContractFactory, Overrides} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import type {
  NFTStoreStorage,
  NFTStoreStorageInterface,
} from "../NFTStoreStorage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "ownerCutPerMillion",
        type: "uint256",
      },
    ],
    name: "ChangedOwnerCutPerMillion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IMelandStoreItems",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "priceInWei",
        type: "uint256",
      },
    ],
    name: "NFTBuyed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IMelandStoreItems",
        name: "nftAddress",
        type: "address",
      },
    ],
    name: "NFTCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IMelandStoreItems",
        name: "nftAddress",
        type: "address",
      },
    ],
    name: "NFTDelete",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IMelandStoreItems",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "checked",
        type: "bool",
      },
    ],
    name: "NFTItemUpdate",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptedToken",
    outputs: [
      {
        internalType: "contract IERC20MELD",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "foundationWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMelandStoreItems",
        name: "",
        type: "address",
      },
    ],
    name: "itemUploadedMap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "officialWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerCutPerMillion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610162806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063088025d31461005c578063451c3d801461008c5780636b7ae8dc1461009f578063a01f79d4146100b2578063eaf37170146100c9575b600080fd5b60025461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60005461006f906001600160a01b031681565b60015461006f906001600160a01b031681565b6100bb60035481565b604051908152602001610083565b6100ec6100d73660046100fc565b60046020526000908152604090205460ff1681565b6040519015158152602001610083565b60006020828403121561010e57600080fd5b81356001600160a01b038116811461012557600080fd5b939250505056fea264697066735822122001657c5f26b0f2c6865660b3601ccfee77adc6cb33e8ca0999aac918b06a465b64736f6c63430008090033";

export class NFTStoreStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<NFTStoreStorage> {
    return super.deploy(overrides || {}) as Promise<NFTStoreStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & {from?: string | Promise<string>}
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NFTStoreStorage {
    return super.attach(address) as NFTStoreStorage;
  }
  connect(signer: Signer): NFTStoreStorage__factory {
    return super.connect(signer) as NFTStoreStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTStoreStorageInterface {
    return new utils.Interface(_abi) as NFTStoreStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTStoreStorage {
    return new Contract(address, _abi, signerOrProvider) as NFTStoreStorage;
  }
}
