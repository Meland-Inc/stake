/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {TypedEventFilter, TypedEvent, TypedListener} from "./common";

interface MelandTierStorageInterface extends ethers.utils.Interface {
  functions: {
    "erc1155RewardById(uint256)": FunctionFragment;
    "erc20RewardById(uint256)": FunctionFragment;
    "erc721RewardById(uint256)": FunctionFragment;
    "addOptionReward(uint256,tuple[],tuple[],tuple[])": FunctionFragment;
    "add100PercentReward(uint256,tuple[],tuple[],tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "erc1155RewardById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20RewardById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc721RewardById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addOptionReward",
    values: [
      BigNumberish,
      {erc1155: string; tokenIds: BigNumberish[]; amounts: BigNumberish[]}[],
      {erc721: string; tokenId: BigNumberish}[],
      {erc20: string; amount: BigNumberish}[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "add100PercentReward",
    values: [
      BigNumberish,
      {erc1155: string; tokenIds: BigNumberish[]; amounts: BigNumberish[]}[],
      {erc721: string; tokenId: BigNumberish}[],
      {erc20: string; amount: BigNumberish}[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "erc1155RewardById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20RewardById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721RewardById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOptionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add100PercentReward",
    data: BytesLike
  ): Result;

  events: {
    "CreateReward(uint256,uint256[],uint256[],uint256[])": EventFragment;
    "RewaardPoolUpdate(uint256)": EventFragment;
    "TierStartSale(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewaardPoolUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TierStartSale"): EventFragment;
}

export type CreateRewardEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[], BigNumber[]] & {
    rewardId: BigNumber;
    erc1155RewardIds: BigNumber[];
    erc721RewardIds: BigNumber[];
    erc20RewardIds: BigNumber[];
  }
>;

export type RewaardPoolUpdateEvent = TypedEvent<[BigNumber] & {cid: BigNumber}>;

export type TierStartSaleEvent = TypedEvent<[BigNumber] & {cid: BigNumber}>;

export class MelandTierStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MelandTierStorageInterface;

  functions: {
    erc1155RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & {erc1155: string}>;

    erc20RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & {erc20: string; amount: BigNumber}>;

    erc721RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & {erc721: string; tokenId: BigNumber}>;

    addOptionReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    add100PercentReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  erc1155RewardById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  erc20RewardById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & {erc20: string; amount: BigNumber}>;

  erc721RewardById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & {erc721: string; tokenId: BigNumber}>;

  addOptionReward(
    cid: BigNumberish,
    erc1155rewards: {
      erc1155: string;
      tokenIds: BigNumberish[];
      amounts: BigNumberish[];
    }[],
    erc721rewards: {erc721: string; tokenId: BigNumberish}[],
    erc20rewards: {erc20: string; amount: BigNumberish}[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  add100PercentReward(
    cid: BigNumberish,
    erc1155rewards: {
      erc1155: string;
      tokenIds: BigNumberish[];
      amounts: BigNumberish[];
    }[],
    erc721rewards: {erc721: string; tokenId: BigNumberish}[],
    erc20rewards: {erc20: string; amount: BigNumberish}[],
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    erc1155RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    erc20RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & {erc20: string; amount: BigNumber}>;

    erc721RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & {erc721: string; tokenId: BigNumber}>;

    addOptionReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<void>;

    add100PercentReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateReward(uint256,uint256[],uint256[],uint256[])"(
      rewardId?: BigNumberish | null,
      erc1155RewardIds?: null,
      erc721RewardIds?: null,
      erc20RewardIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[], BigNumber[]],
      {
        rewardId: BigNumber;
        erc1155RewardIds: BigNumber[];
        erc721RewardIds: BigNumber[];
        erc20RewardIds: BigNumber[];
      }
    >;

    CreateReward(
      rewardId?: BigNumberish | null,
      erc1155RewardIds?: null,
      erc721RewardIds?: null,
      erc20RewardIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[], BigNumber[]],
      {
        rewardId: BigNumber;
        erc1155RewardIds: BigNumber[];
        erc721RewardIds: BigNumber[];
        erc20RewardIds: BigNumber[];
      }
    >;

    "RewaardPoolUpdate(uint256)"(
      cid?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {cid: BigNumber}>;

    RewaardPoolUpdate(
      cid?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {cid: BigNumber}>;

    "TierStartSale(uint256)"(
      cid?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {cid: BigNumber}>;

    TierStartSale(
      cid?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {cid: BigNumber}>;
  };

  estimateGas: {
    erc1155RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc721RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addOptionReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    add100PercentReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    erc1155RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc721RewardById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addOptionReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    add100PercentReward(
      cid: BigNumberish,
      erc1155rewards: {
        erc1155: string;
        tokenIds: BigNumberish[];
        amounts: BigNumberish[];
      }[],
      erc721rewards: {erc721: string; tokenId: BigNumberish}[],
      erc20rewards: {erc20: string; amount: BigNumberish}[],
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
