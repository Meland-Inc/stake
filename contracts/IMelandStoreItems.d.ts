/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {TypedEventFilter, TypedEvent, TypedListener} from "./common";

interface IMelandStoreItemsInterface extends ethers.utils.Interface {
  functions: {
    "melandStoreItems()": FunctionFragment;
    "melandStoreItemsRestrictedPurchase(bytes32)": FunctionFragment;
    "melandStoreItemsRestrictPurchaseNFTIds(bytes32)": FunctionFragment;
    "melandStoreReceipt(bytes32)": FunctionFragment;
    "melandStoreItemsMint(bytes32,uint256,address)": FunctionFragment;
    "melandStoreSellStatus(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "melandStoreItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "melandStoreItemsRestrictedPurchase",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "melandStoreItemsRestrictPurchaseNFTIds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "melandStoreReceipt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "melandStoreItemsMint",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "melandStoreSellStatus",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "melandStoreItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "melandStoreItemsRestrictedPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "melandStoreItemsRestrictPurchaseNFTIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "melandStoreReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "melandStoreItemsMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "melandStoreSellStatus",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMelandStoreItems extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMelandStoreItemsInterface;

  functions: {
    melandStoreItems(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {symbols: string[]; prices: BigNumber[]}
    >;

    melandStoreItemsRestrictedPurchase(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {restricted: boolean; restrictLimit: BigNumber}
    >;

    melandStoreItemsRestrictPurchaseNFTIds(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[]] & {restricted: boolean; ids: BigNumber[]}
    >;

    melandStoreReceipt(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & {receipt: string}>;

    melandStoreItemsMint(
      symbol: BytesLike,
      id: BigNumberish,
      to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;

    melandStoreSellStatus(
      symbol: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<ContractTransaction>;
  };

  melandStoreItems(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & {symbols: string[]; prices: BigNumber[]}
  >;

  melandStoreItemsRestrictedPurchase(
    symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {restricted: boolean; restrictLimit: BigNumber}
  >;

  melandStoreItemsRestrictPurchaseNFTIds(
    symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber[]] & {restricted: boolean; ids: BigNumber[]}>;

  melandStoreReceipt(
    symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  melandStoreItemsMint(
    symbol: BytesLike,
    id: BigNumberish,
    to: string,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  melandStoreSellStatus(
    symbol: BytesLike,
    overrides?: Overrides & {from?: string | Promise<string>}
  ): Promise<ContractTransaction>;

  callStatic: {
    melandStoreItems(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {symbols: string[]; prices: BigNumber[]}
    >;

    melandStoreItemsRestrictedPurchase(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {restricted: boolean; restrictLimit: BigNumber}
    >;

    melandStoreItemsRestrictPurchaseNFTIds(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[]] & {restricted: boolean; ids: BigNumber[]}
    >;

    melandStoreReceipt(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    melandStoreItemsMint(
      symbol: BytesLike,
      id: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    melandStoreSellStatus(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    melandStoreItems(overrides?: CallOverrides): Promise<BigNumber>;

    melandStoreItemsRestrictedPurchase(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    melandStoreItemsRestrictPurchaseNFTIds(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    melandStoreReceipt(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    melandStoreItemsMint(
      symbol: BytesLike,
      id: BigNumberish,
      to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;

    melandStoreSellStatus(
      symbol: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    melandStoreItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    melandStoreItemsRestrictedPurchase(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    melandStoreItemsRestrictPurchaseNFTIds(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    melandStoreReceipt(
      symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    melandStoreItemsMint(
      symbol: BytesLike,
      id: BigNumberish,
      to: string,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;

    melandStoreSellStatus(
      symbol: BytesLike,
      overrides?: Overrides & {from?: string | Promise<string>}
    ): Promise<PopulatedTransaction>;
  };
}
