/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";
import type {TypedEventFilter, TypedEvent, TypedListener} from "./common";

interface MelandStakesStorageInterface extends ethers.utils.Interface {
  functions: {
    "acceptedToken()": FunctionFragment;
    "stakeById(bytes32)": FunctionFragment;
    "stakePoolById(uint256)": FunctionFragment;
    "stakePoolIdsByStaker(address,uint256)": FunctionFragment;
    "stakePoolSaleCountByStakePoolId(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePoolById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePoolIdsByStaker",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePoolSaleCountByStakePoolId",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakePoolById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePoolIdsByStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePoolSaleCountByStakePoolId",
    data: BytesLike
  ): Result;

  events: {
    "CreateStakePool(uint256)": EventFragment;
    "DefaultStakeUpdate(uint256)": EventFragment;
    "Harvest(bytes32,uint256)": EventFragment;
    "NewStake(bytes32,address)": EventFragment;
    "StakeClaim(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateStakePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultStakeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeClaim"): EventFragment;
}

export type CreateStakePoolEvent = TypedEvent<
  [BigNumber] & {stakePoolId: BigNumber}
>;

export type DefaultStakeUpdateEvent = TypedEvent<
  [BigNumber] & {stakePoolId: BigNumber}
>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber] & {stakeId: string; eran: BigNumber}
>;

export type NewStakeEvent = TypedEvent<
  [string, string] & {stakeId: string; staker: string}
>;

export type StakeClaimEvent = TypedEvent<[string] & {stakeId: string}>;

export class MelandStakesStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MelandStakesStorageInterface;

  functions: {
    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    stakeById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
        stakePoolId: BigNumber;
        staker: string;
        lastRecivedAt: BigNumber;
        stakedAt: BigNumber;
        expiredAt: BigNumber;
        claimed: boolean;
      }
    >;

    stakePoolById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        ditaminLD: BigNumber;
        ditaminC: BigNumber;
        numberOfMELD: BigNumber;
        landC: number;
        vipname: string;
        stakeApyPercent: number;
        gameApyPercent: number;
        freezeTime: BigNumber;
        totalVolume: BigNumber;
      }
    >;

    stakePoolIdsByStaker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakePoolSaleCountByStakePoolId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  stakeById(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
      stakePoolId: BigNumber;
      staker: string;
      lastRecivedAt: BigNumber;
      stakedAt: BigNumber;
      expiredAt: BigNumber;
      claimed: boolean;
    }
  >;

  stakePoolById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      ditaminLD: BigNumber;
      ditaminC: BigNumber;
      numberOfMELD: BigNumber;
      landC: number;
      vipname: string;
      stakeApyPercent: number;
      gameApyPercent: number;
      freezeTime: BigNumber;
      totalVolume: BigNumber;
    }
  >;

  stakePoolIdsByStaker(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakePoolSaleCountByStakePoolId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptedToken(overrides?: CallOverrides): Promise<string>;

    stakeById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, boolean] & {
        stakePoolId: BigNumber;
        staker: string;
        lastRecivedAt: BigNumber;
        stakedAt: BigNumber;
        expiredAt: BigNumber;
        claimed: boolean;
      }
    >;

    stakePoolById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        ditaminLD: BigNumber;
        ditaminC: BigNumber;
        numberOfMELD: BigNumber;
        landC: number;
        vipname: string;
        stakeApyPercent: number;
        gameApyPercent: number;
        freezeTime: BigNumber;
        totalVolume: BigNumber;
      }
    >;

    stakePoolIdsByStaker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakePoolSaleCountByStakePoolId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CreateStakePool(uint256)"(
      stakePoolId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {stakePoolId: BigNumber}>;

    CreateStakePool(
      stakePoolId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {stakePoolId: BigNumber}>;

    "DefaultStakeUpdate(uint256)"(
      stakePoolId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {stakePoolId: BigNumber}>;

    DefaultStakeUpdate(
      stakePoolId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], {stakePoolId: BigNumber}>;

    "Harvest(bytes32,uint256)"(
      stakeId?: BytesLike | null,
      eran?: null
    ): TypedEventFilter<
      [string, BigNumber],
      {stakeId: string; eran: BigNumber}
    >;

    Harvest(
      stakeId?: BytesLike | null,
      eran?: null
    ): TypedEventFilter<
      [string, BigNumber],
      {stakeId: string; eran: BigNumber}
    >;

    "NewStake(bytes32,address)"(
      stakeId?: BytesLike | null,
      staker?: string | null
    ): TypedEventFilter<[string, string], {stakeId: string; staker: string}>;

    NewStake(
      stakeId?: BytesLike | null,
      staker?: string | null
    ): TypedEventFilter<[string, string], {stakeId: string; staker: string}>;

    "StakeClaim(bytes32)"(
      stakeId?: BytesLike | null
    ): TypedEventFilter<[string], {stakeId: string}>;

    StakeClaim(
      stakeId?: BytesLike | null
    ): TypedEventFilter<[string], {stakeId: string}>;
  };

  estimateGas: {
    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakeById(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    stakePoolById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakePoolIdsByStaker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakePoolSaleCountByStakePoolId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePoolById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePoolIdsByStaker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePoolSaleCountByStakePoolId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
